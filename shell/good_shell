#! /usr/bin/env python3

'''
Author: Jose Eduardo Soto

Description: A shell that can do single commands, backgrounding, redirection, and singular piping. It is
implemented by having grand-children processes. The grandparent process' responsibility is only for the shell
prompt and commands for exiting and initiating the first child process. The first child is reponsible for handling
the different kinds of commands possible (single, backgrounds, redirection, and piping). The final smaller child
executes the commands with exec. They don't return.
'''

import os, sys, re


def main():

    prompt = sys.ps1 = '$ '

    running = True

    while running:

        os.write(1, prompt.encode()) #Print prompt
        keyboard = os.read(0,100).decode() #Wait for input and get rid of return character

        if keyboard is '\n':                      # No input
            pass

        elif keyboard.strip() == 'exit':        # Exit command

            os.write(2, ('Exiting GoodShell\n'.encode()))
            running = False
            sys.exit(0)
            break

        elif len(keyboard.split()) == 0:
            pass
        elif keyboard.split()[0] == 'cd':       # Change directory command

            os.chdir(keyboard.split()[1])
            pass
        
        else:

            '''
            Fork for midchild. Midchild handles the parsing and seperation of commands.
            '''
            mc_fork = os.fork()

            if mc_fork < 0:

                os.write(2, ('Could not fork process. Error code %d\n' % mc_fork).encode())
                sys.exit(-1)

            '''
            Midchild processing.
            '''
            if mc_fork == 0:

                if '|' in keyboard:

                    cmd1, cmd2 = parse_pipe_command(keyboard) # seperates the two commands
                    s_in = os.dup(0) #Save stdin for later, s_in is stacked in file descriptor
                    s_out = os.dup(1) #Save stdout for later, s_out is also stacked
                    fd_in = os.dup(s_in) #Variable for file descriptor input, created another to the stack

                    # Without loop or chaining for multiple pipes.
                    pipe_r, pipe_w = os.pipe() # Get pipe file descriptors
                    os.dup2(pipe_w, 1) # Put in pipe write for stdout
                    running = exec_child_process(cmd1, True) # execute first command
                    os.dup2(pipe_r, 0) # Put in pipe read for stdin
                    os.dup2(s_out, 1) # Return stdout for stdout
                    running = exec_child_process(cmd2, False) # execute second command
                    os.dup2(s_in, 0) # Restore stdin for stdin
                    os.close(s_in)
                    os.close(s_out)
                    os.close(pipe_r)
                    os.close(pipe_w)

                elif ('<' in keyboard) or ('>' in keyboard):

                    cmd_args, out_file, in_file = parse_rd_command(keyboard) # Parse out command
                    s_out = os.dup(1) # save stdout for later to restore
                    fd_fout = os.open(out_file, os.O_WRONLY | os.O_CREAT) # Open file descriptor for a file
                    os.dup2(fd_fout, 1) # Put file fd in stdout
                    running = exec_child_process(cmd_args, False) # Execute the command
                    os.dup2(s_out, 1) # Put in stdout back into stdout
                    os.close(fd_fout)

                elif '&' is keyboard[-2]: # Check if ampersand is at the end

                    os.write(1, ('[%s] %d\n' % (keyboard.split()[0], os.getpid())).encode()) # Print the process name
                    running = exec_child_process(keyboard[:-2], True) # Execute the command but don't wait for it

                else:
                    running = exec_child_process(keyboard, False)

            else:
                wait_p_fork = os.wait()


'''
Parse help from f20_os teams
'''
def parse_rd_command(cmd_string):  
    out_file = None
    in_file = None
    cmd = ''

    cmd_string = re.sub(' +', ' ', cmd_string)

    if '>' in cmd_string:
        [cmd, out_file] = cmd_string.split('>', 1)
        out_file = out_file.strip()

    if '<' in cmd:
        [cmd, in_file] = cmd.split('<', 1)
        in_file = in_file.strip()

    elif out_file != None and '<' in out_file:
        [out_file, in_file] = out_file.split('<', 1)
        out_file = out_file.strip()
        in_file = in_file.strip()

    return cmd, out_file, in_file

'''
Simple method that seperates the two different commands that come from piping.
'''
def parse_pipe_command(cmd_string):
    if '|' in cmd_string:
        [first_cmd, second_cmd] = cmd_string.split('|', 1)
        first_cmd = first_cmd.strip()
        second_cmd = second_cmd.strip()
        return first_cmd, second_cmd
    else:
        return None, None

'''
Function for creating the grandchild processes that don't return.
'''
def exec_child_process(command, background):
    child_fork = os.fork()
    if child_fork < 0:
        os.write(2, ('Could not fork process. Error code %d\n' & child_fork).encode())
        sys.exit(-1)
    if child_fork is 0:
        execute_command(command)
    else:
        # Background boolean to allow for shell to prompt again without waiting for command to finish.
        if not background:
            child_wait_fork = os.wait()
        # Return code that allows exiting to be possible. Child processes won't allow for exiting w/o it.
        return False

'''
Method for finding the binaries for the commands throught the path directories. Executes the non-returning commands
here.
'''
def execute_command(cmd):
    cmd = cmd.split()
    # Must try to run absolute path before running the path
    try:
        os.execve(cmd[0], cmd, os.environ)
    except FileNotFoundError:
        pass
    for dir in re.split(':', os.environ['PATH']):
            # Create the absolute path for calling the execute.
            executable = '%s/%s' % (dir, cmd[0])
            try:
                os.execve(executable, cmd, os.environ)
            except FileNotFoundError:
                pass
    os.write(1, ('%s: command not found (gs)\n' % cmd[0]).encode())
    sys.exit(-1)

main()
